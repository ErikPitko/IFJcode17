prog_body	->	EOF
				Scope EOL <main_body> EOL <prog_body>
				Declare Function fncName ( <par_list> As <var_type> EOL <prog_body>
				Function id ( <par_list> As <var_type> EOL <fnc_body> EOL <prog_body>

main_body	->	<command><main_body>
				Dim id As <var_type>EOL<main_body>
				End Scope

fnc_body	->	<command><fnc_body>
				Dim id As <var_type>EOL<fnc_body>
				End Function

if_body		->	<command><if_body>
				Dim id As <var_type>EOL<if_body>
				Else <else_body>
				End If

else_body	->	<command><else_body>
				Dim id As <var_type>EOL<else_body>
				End If

while_body	->	<command><while_body>
				Dim id As <var_type>EOL<while_body>
				Loop

par_list	->	)
				id As <var_type> <par_next>

par_next	->	, id As <var type> <par_next>
				)

arg_list	->	)
				id <arg_next>
				const <arg_next>

arg_next	->	)
				, <arg_next2>

arg_next2	->	id <arg_next>
				const <arg_next>

var_type 	->	Integer
				Double
				String

print_exp	->	<assingnment> ; <print_exp>
				<assingnment> ; EOL

command		->	Input id EOL
				If EXP Then EOL <if_body> EOL
				id = <assingnment> EOL
				Return <assingnment> EOL
				Do While EXP EOL <while_body> EOL
				Print <print_exp>

assingment	->	EXP
				id ( <arg_list>
